/// <auto-generated>
/// This file has been auto-generated by WizardTea v0.0.0.1.
///
/// Do not edit unless you know what you are doing.
/// If there is an issue, file at https://github.com/glomdom/WizardTea/issues/
/// </auto-generated>

using System;
using System.Numerics;

namespace WizardTea;

public struct BSVertexDesc {
    private ulong _value;

    public uint Vertex_Data_Size {
        get => (uint)((_value & 0xFul) >> 0);
        set => _value = (ulong)((_value & ~0xFul) | (((ulong)value << 0) & 0xFul));
    }

    public uint Dynamic_Vertex_Size {
        get => (uint)((_value & 0xF0ul) >> 4);
        set => _value = (ulong)((_value & ~0xF0ul) | (((ulong)value << 4) & 0xF0ul));
    }

    public uint UV1_Offset {
        get => (uint)((_value & 0xF00ul) >> 8);
        set => _value = (ulong)((_value & ~0xF00ul) | (((ulong)value << 8) & 0xF00ul));
    }

    public uint UV2_Offset {
        get => (uint)((_value & 0xF000ul) >> 12);
        set => _value = (ulong)((_value & ~0xF000ul) | (((ulong)value << 12) & 0xF000ul));
    }

    public uint Normal_Offset {
        get => (uint)((_value & 0xF0000ul) >> 16);
        set => _value = (ulong)((_value & ~0xF0000ul) | (((ulong)value << 16) & 0xF0000ul));
    }

    public uint Tangent_Offset {
        get => (uint)((_value & 0xF00000ul) >> 20);
        set => _value = (ulong)((_value & ~0xF00000ul) | (((ulong)value << 20) & 0xF00000ul));
    }

    public uint Color_Offset {
        get => (uint)((_value & 0xF000000ul) >> 24);
        set => _value = (ulong)((_value & ~0xF000000ul) | (((ulong)value << 24) & 0xF000000ul));
    }

    public uint Skinning_Data_Offset {
        get => (uint)((_value & 0xF0000000ul) >> 28);
        set => _value = (ulong)((_value & ~0xF0000000ul) | (((ulong)value << 28) & 0xF0000000ul));
    }

    public uint Landscape_Data_Offset {
        get => (uint)((_value & 0xF00000000ul) >> 32);
        set => _value = (ulong)((_value & ~0xF00000000ul) | (((ulong)value << 32) & 0xF00000000ul));
    }

    public uint Eye_Data_Offset {
        get => (uint)((_value & 0xF000000000ul) >> 36);
        set => _value = (ulong)((_value & ~0xF000000000ul) | (((ulong)value << 36) & 0xF000000000ul));
    }

    public uint Unused_01 {
        get => (uint)((_value & 0xF0000000000ul) >> 40);
        set => _value = (ulong)((_value & ~0xF0000000000ul) | (((ulong)value << 40) & 0xF0000000000ul));
    }

    public VertexAttribute Vertex_Attributes {
        get => (VertexAttribute)((_value & 0xFFF00000000000ul) >> 44);
        set => _value = (ulong)((_value & ~0xFFF00000000000ul) | (((ulong)value << 44) & 0xFFF00000000000ul));
    }

    /// <summary>
    /// Implicit cast for this type. May result in loss of data, as we cast to ulong.
    /// </summary>
    public static implicit operator BSVertexDesc(int value) => new BSVertexDesc { _value = (ulong)value };
}
