/// <auto-generated>
/// This file has been auto-generated by WizardTea v0.0.0.1.
///
/// Do not edit unless you know what you are doing.
/// If there is an issue, file at https://github.com/glomdom/WizardTea/issues/
/// </auto-generated>

using System;
using System.Numerics;

namespace WizardTea;

public struct AlphaFlags {
    private ushort _value;

    public bool Alpha_Blend {
        get => (_value & 0x0001) != 0;
        set => _value = (ushort)(value ? _value | 0x0001 : _value & ~0x0001);
    }

    public AlphaFunction Source_Blend_Mode {
        get => (AlphaFunction)((_value & 0x001E) >> 1);
        set => _value = (ushort)((_value & ~0x001E) | (((ushort)value << 1) & 0x001E));
    }

    public AlphaFunction Destination_Blend_Mode {
        get => (AlphaFunction)((_value & 0x01E0) >> 5);
        set => _value = (ushort)((_value & ~0x01E0) | (((ushort)value << 5) & 0x01E0));
    }

    public bool Alpha_Test {
        get => (_value & 0x0200) != 0;
        set => _value = (ushort)(value ? _value | 0x0200 : _value & ~0x0200);
    }

    public TestFunction Test_Func {
        get => (TestFunction)((_value & 0x1C00) >> 10);
        set => _value = (ushort)((_value & ~0x1C00) | (((ushort)value << 10) & 0x1C00));
    }

    public bool No_Sorter {
        get => (_value & 0x2000) != 0;
        set => _value = (ushort)(value ? _value | 0x2000 : _value & ~0x2000);
    }

    public bool Clone_Unique {
        get => (_value & 0x4000) != 0;
        set => _value = (ushort)(value ? _value | 0x4000 : _value & ~0x4000);
    }

    public bool Editor_Alpha_Threshold {
        get => (_value & 0x8000) != 0;
        set => _value = (ushort)(value ? _value | 0x8000 : _value & ~0x8000);
    }

    /// <summary>
    /// Implicit cast for this type. May result in loss of data, as we cast to ushort.
    /// </summary>
    public static implicit operator AlphaFlags(int value) => new AlphaFlags { _value = (ushort)value };
}
